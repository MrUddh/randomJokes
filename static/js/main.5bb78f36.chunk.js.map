{"version":3,"sources":["services/jokes.js","components/JokeCard.js","App.js","reportWebVitals.js","store.js","index.js"],"names":["jokesApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","endpoints","builder","getJoke","query","getFiveRandomJokesByCategory","category","useGetFiveRandomJokesByCategoryQuery","JokeCard","data","error","isLoading","className","jokes","map","joke","id","catagories","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","middleware","getDefaultMiddleware","concat","setupListeners","dispatch","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOAEaA,EAAWC,YAAU,CAChCC,YAAa,WACbC,UAAWC,YAAe,CAAEC,QAAS,kCACrCC,UAAW,SAACC,GAAD,MAAc,CACvBC,QAASD,EAAQE,MAAM,CACrBA,MAAO,0BAETC,6BAA8BH,EAAQE,MAAM,CAC1CA,MAAO,SAACE,GAAD,gBAAiBA,EAAjB,gCAKEC,EAAyCZ,EAAzCY,qC,OCeAC,EA1BE,SAAC,GAAkB,IAAD,EAAfF,EAAe,EAAfA,SAClB,EAAmCC,EACjCD,GADMG,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAAOC,EAArB,EAAqBA,UAIrB,OACE,sBAAKC,UAAU,WAAf,UACE,uCAAQN,EAAR,YACCI,EACC,iEACEC,EACF,kDACEF,EACF,qCACGA,QADH,IACGA,GADH,UACGA,EAAMI,aADT,aACG,EAAaC,KAAI,SAACC,GAAD,OAChB,gCACE,6BAAKA,EAAKA,OACV,yBAFQA,EAAKC,SAMjB,SCtBJC,EAAa,CAAC,cAAe,OAAQ,gBAAiB,OAc7CC,EAZH,WACV,OACE,qBAAKN,UAAU,MAAf,SACE,qBAAKA,UAAU,YAAf,SACGK,EAAWH,KAAI,SAACR,GAAD,OACd,cAAC,EAAD,CAAyBA,SAAUA,GAApBA,WCEVa,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,uBCHDQ,EAAQC,yBAAe,CAClCC,QAAQ,eACLnC,EAASE,YAAcF,EAASmC,SAKnCC,WAAY,SAACC,GAAD,OACVA,IAAuBC,OAAOtC,EAASoC,eAK3CG,yBAAeN,EAAMO,U,WCTrBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUV,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJW,SAASC,eAAe,SAM1BrB,M","file":"static/js/main.5bb78f36.chunk.js","sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\n\nexport const jokesApi = createApi({\n  reducerPath: 'jokesApi',\n  baseQuery: fetchBaseQuery({ baseUrl: ' https://v2.jokeapi.dev/joke/' }),\n  endpoints: (builder) => ({\n    getJoke: builder.query({\n      query: () => `any`,\n    }),\n    getFiveRandomJokesByCategory: builder.query({\n      query: (category) => `${category}?type=single&amount=5`,\n    }),\n  }),\n});\n\nexport const { useGetFiveRandomJokesByCategoryQuery } = jokesApi;\n","import React from 'react';\nimport '../App.css';\nimport { useGetFiveRandomJokesByCategoryQuery } from '../services/jokes';\n\nconst JokeCard = ({ category }) => {\n  const { data, error, isLoading } = useGetFiveRandomJokesByCategoryQuery(\n    category\n  );\n\n  return (\n    <div className=\"card rgb\">\n      <h1>{`${category} jokes`}</h1>\n      {error ? (\n        <>Oh no, there was an error</>\n      ) : isLoading ? (\n        <>Loading...</>\n      ) : data ? (\n        <div>\n          {data?.jokes?.map((joke) => (\n            <div key={joke.id}>\n              <li>{joke.joke}</li>\n              <br />\n            </div>\n          ))}\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nexport default JokeCard;\n","import './App.css';\nimport JokeCard from './components/JokeCard';\n\nconst catagories = ['Programming', 'Dark', 'Miscellaneous', 'Pun'];\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        {catagories.map((category) => (\n          <JokeCard key={category} category={category} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit';\nimport { setupListeners } from '@reduxjs/toolkit/dist/query';\nimport { jokesApi } from './services/jokes';\n\nexport const store = configureStore({\n  reducer: {\n    [jokesApi.reducerPath]: jokesApi.reducer,\n  },\n\n  // Adding the api middleware enables caching, invalidation, polling,\n  // and other useful features of `rtk-query`.\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware().concat(jokesApi.middleware),\n});\n\n// optional, but required for refetchOnFocus/refetchOnReconnect behaviors\n// see `setupListeners` docs - takes an optional callback as the 2nd arg for customization\nsetupListeners(store.dispatch);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { store } from './store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}